// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- start of better-auth tables ---
model User {
  id                  String     @id
  name                String?
  email               String
  emailVerified       Boolean
  image               String?
  phone               String? // Optional for campaign creators
  socialLink          String? // For user, verification, TODO change to socialLink
  verificationPhoto   String? // For user, verification
  isAdmin             Boolean    @default(false)
  accountType         String     @default("individual") // Only "individual" or "org"
  status              String     @default("pending") // "pending", "active", "rejected"
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @default(now())
  sessions            Session[]
  accounts            Account[]
  campaigns           Campaign[]
  verifiedDonations   Donation[]
  onboardingCompleted Boolean    @default(false)

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// --- end of better-auth tables ---

model Campaign {
  id             String   @id @default(cuid())
  title          String
  description    String
  accountType    String //  "individual" or "org" this is automatically set to user's accountType when isAdmin is false
  regionCode     String
  townshipCode   String
  photos         String // stringify array of image URLs
  categories     String // stringify array of categories
  contactMethods String // stringify array of type, value. type: "phone" | "viber" | "facebook" | "instagram" | "tiktok" | "whatsapp" | "telegram"
  status         String // "pending", "active", "rejected"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  // Relations
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  region    Region            @relation(fields: [regionCode], references: [regionCode])
  township  Township          @relation(fields: [townshipCode], references: [townshipCode])
  payments  CampaignBanking[]
  donations Donation[]

  @@index([regionCode])
  @@index([townshipCode])
}

model CampaignBanking {
  id              String    @id @default(cuid())
  methodType      String // "bank", "crypto", "mobilepayment", "link"
  country         String    @default("Myanmar")
  accountBankName String?
  accountName     String?
  accountNumber   String?
  cryptoAddress   String?
  mobileNumber    String?
  isVerified      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  // Dual-linking: To both Campaign AND User
  campaignId      String?
  campaign        Campaign? @relation(fields: [campaignId], references: [id])

  // For mobile money
  mobileProvider String?

  // For link
  link String?

  @@index([country])
  @@index([methodType])
}

model Donation {
  id             String    @id @default(cuid())
  amount         Float
  screenshotPath String
  isAnonymous    Boolean   @default(false)
  status         String    @default("pending") // "pending", "verified", "rejected"
  donatedAt      DateTime  @default(now())
  // Verification fields (previously in DonationVerification)
  verifiedAt     DateTime? // Added when status changes to Verified/Rejected
  adminNote      String? // Reason for rejection/notes
  adminId        String? // Admin who verified
  admin          User?     @relation(fields: [adminId], references: [id])
  // Optional donor info
  donorName      String?
  donorEmail     String?
  // Relations
  campaign       Campaign  @relation(fields: [campaignId], references: [id])
  campaignId     String

  @@index([status])
  @@index([campaignId])
}

model Region {
  id         String     @id @default(cuid())
  regionCode String     @unique
  nameEn     String // English name
  nameMm     String // Myanmar name
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  townships  Township[]
  campaigns  Campaign[]

  @@index([regionCode])
}

model Township {
  id           String   @id @default(cuid())
  townshipCode String   @unique
  nameEn       String // English name
  nameMm       String // Myanmar name
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  regionCode String
  region     Region     @relation(fields: [regionCode], references: [regionCode])
  campaigns  Campaign[]

  @@index([townshipCode])
  @@index([regionCode])
}
